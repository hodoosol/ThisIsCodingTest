"""
이것이 코딩 테스트다 2021 강의 몰아보기
2021.04.15

Chapter 3. DFS & BFS

"""


"""
1. 그래프 탐색 알고리즘 : DFS / BFS
탐색이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 뜻한다.
DFS와 BFS는 대표적인 그래프 탐색 알고리즘이다.
이 두 알고리즘은 코테에서 매우 자주 등장하는 유형이므로 반드시 숙지해야 한다.


2. 스택 자료구조
먼저 들어온 데이터가 나중에 나가는 형식의 자료구조. -> 선입후출 !
입구와 출구가 동일한 형태로 시각화할 수 있다.

5 - 2 - 3 - 7       이 스택에 저장되어 있을 때 데이터를 삭제하면
5 - 2 - 3           이 되고, 1과 4를 추가로 저장하면
5 - 2 - 3 - 1 - 4   가 된다. 이 상태에서 데이터 하나를 더 삭제하면
5 - 2 - 3 - 1       이 되는 것이다.

스택 자료구조를 이용하는 것은 리스트 자료형이다.


"""


# 파이썬에서 스택을 코드로 구현해보자.
stack = []

# 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) - 삭제()
stack.append(5)
stack.append(2)
stack.append(3)
stack.append(7)
stack.pop()
stack.append(1)
stack.append(4)
stack.pop()

# 맨 끝 원소부터 출력     -> [1, 3, 2, 5]
print(stack[::-1])
# 맨 처음 원소부터 출력   -> [5, 2, 3, 1]
print(stack)





"""
3. 큐 자료구조
먼저 들어온 데이터가 먼저 나가는 형식의 자료구조. -> 선입선출 !
큐는 입구와 출구가 모두 뚫려 있는 터널과 같은 형태로 시각화할 수 있다.

위와 동일하게 큐 자료구조에서 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) 해보면,
7 - 3 - 2 - 5 가 된다.
   
이 상태에서 삭제() 를 해보면 가장 오른쪽에 있는 5가 사라져
7 - 3 - 2 가 될 것이다.

삽입(1) - 삽입(4) - 삭제() 를 하면 순서대로
1 - 7 - 3 - 2
4 - 1 - 7 - 3 - 2
4 - 1 - 7 - 3      가 될 것이다.

파이썬에서 큐 자료구조를 사용하려면 deque 라이브러리를 가져오면 된다.


"""


# 파이썬에서 큐 자료구조를 코드로 구현해보자.
from collections import deque

queue = deque()

# 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) - 삭제() - 삽입(1) - 삽입(4) - 삭제()
queue.append(5)
queue.append(2)
queue.append(3)
queue.append(7)
queue.popleft()
queue.append(1)
queue.append(4)
queue.popleft()

# 먼저 들어온 순서대로 출력    -> deque([3, 7, 1, 4])
print(queue)
# 역순으로 바꾸기
queue.reverse()
# 나중에 들어온 원소부터 출력   -> deque([4, 1, 7, 3])
print(queue)


## 리스트를 사용하여 큐 자료구조를 구현할 수도 있지만, 그렇게 하면
## 시간 복잡도가 올라가기 때문에 비효율적으로 동작할 수도 있기 때문에
## 큐를 사용하고 싶을땐 deque 라이브러리를 부르자.





"""
4. 재귀 함수(Recursive Fucntion)
재귀 함수란 자기 자신을 다시 호출하는 함수를 의미한다.

단순한 형태의 재귀 함수 예제
 - '재귀 함수를 호출합니다.' 라는 문자열을 무한히 출력한다.
 - 어느 정도 출력하다가 최대 재귀 깊이 초과 메시지가 출력된다.
   RecursionError: maximum recursion depth exceeded while calling a Python object
   
"""


# 재귀 함수 예제
def recursive_function() :
    print('재귀 함수를 호출합니다.')
    recursive_function()
recursive_function()


"""
재귀 함수의 종료 조건 ?
 - 재귀 함수를 문제 풀이에서 사용할 때는 종료 조건을 반드시 명시해야 한다.
   그렇지 않으면 함수가 무한히 호출될 수 있다.
   
"""


# 종료 조건을 포함한 재귀 함수 예제
def recursive_funcion2(i) :
    # 100번째 호출을 했을 때 종료되도록 종료 조건 명시
    if i == 100 :
        return
    print(i, ' 번째 재귀 함수에서 ', i + 1, ' 번째 재귀 함수를 호출한다.')
    recursive_funcion2(i + 1)
    print(i, ' 번째 재귀 함수를 종료한다.')

recursive_funcion2(1)



# 팩토리얼 구현 예제
## n! = 1 * 2 * 3 * ... * (n - 1) * n
## 수학적으로 0!과 1!의 값은 1이다.

# 반복적으로 구현한 n!
def factorial_iterative(n) :
    result = 1
    # 1부터 n까지의 수를 차례대로 곱하기
    for i in range(1, n + 1) :
        result *= i
    return result

# 재귀적으로 구현한 n!
def factorial_recursive(n) :
    # n이 1 이하인 경우 1을 반환
    if n <= 1 :
        return 1
    # n! = n * (n - 1)! 을 그대로 코드로 작성하기
    return n * factorial_recursive(n - 1)

# 각각의 방식으로 구현한 n! 출력 (n = 5)
print('반복적으로 구현 : ', factorial_iterative(5))
    # -> 반복적으로 구현 :  120
print('재귀적으로 구현 : ', factorial_recursive(5))
    # -> 재귀적으로 구현 :  120



"""
최대공약수 계산 (유클리드 호제법) 예제
 - 유클리드 호제법은 두 개의 자연수에 대한 최대공약수를 구하는 대표적인 알고리즘이다.

유클리드 호제법
 - 두 자연수 a, b (a > b)에 대하여 a를 b로 나눈 나머지를 r이라고 해보자.
   이 때, a와 b의 최대공약수는 b와 r의 최대공약수와 같다.
   이 아이디어를 그대로 재귀 함수로 작성할 수 있다.
   
"""


# 유클리드 호제법으로 최대공약수를 계산하는 코드를 작성해보자.
def gcd(a, b) :
    if a % b == 0 :
        return b
    else :
        return gcd(b, a % b)

print(gcd(192, 162))  #  ->  6 출력



"""
재귀 함수 사용 시 유의사항
 - 재귀 함수를 잘 활용하면 복잡한 알고리즘을 간결하게 작성할 수 있다.
   단, 오히려 다른 사람이 이해하기 어려운 코드가 될 수 있으므로 신중히 사용.
 - 모든 재귀 함수는 반복문을 이용하여 동일한 기능을 구현할 수 있다.
 - 재귀 함수가 반복문보다 유리한 경우도 있고 불리한 경우도 있다.
 - 컴퓨터가 함수를 연속적으로 호출하면 컴퓨터 메모리 내부의 스택 프레임에 쌓인다.
   따라서 스택을 사용해야 할 때, 구현상 스택 라이브러리 대신 재귀함수를 이용하기도 한다.
   
"""




