"""
이것이 코딩 테스트다 2021 강의 몰아보기
2021.04.16

Chapter 3. DFS & BFS

"""


"""
3. DFS (Depth - First Search)

DFS 는 깊이 우선 탐색이라고도 부르며 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.

DFS는 스택 자료구조(혹은 재귀 함수)를 이용하며,
 1) 탐색 시작 노드를 스택에 삽입하고 방문 처리.
 2) 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면
    그 노드를 스택에 넣고 방문처리. 없다면 스택에서 최상단 노드 꺼내기
 3) 더 이상 2번의 과정을 수행할 수 없을 때까지 반복한다.



- DFS 동작 예시 (번호가 낮은 인접 노드부터 방문한다.)
시작 노드 : 1

1) 1을 스택에 삽입하고 방문 처리한다.

2) 스택의 최상단 노드인 1에 방문하지 않은 인접노드는 2, 3, 8이 있으나
   가장 낮은 번호인 2를 선택하여 스택에 넣고 방문 처리한다.

3) 그 다음으로 스택의 최상단 노드가 된 2에 방문하지 않은 인접노드는 7이 있으므로
   7번 노드를 스택에 넣고 방문 처리한다.

4) 스택의 최상단 노드인 7에 방문하지 않은 인접노드는 6, 8이 있으므로
   6번 노드를 스택에 넣고 방문 처리한다.
   ** DFS는 깊이 우선 탐색이므로 그래프의 가장 깊은 곳으로 먼저 들어갔다가,
      더 이상 들어갈 수 없을 때 다시 돌아와서 다른 깊은 곳을 탐색하게 된다.
   
5) 스택의 최상단 노드인 6에는 방문하지 않은 인접 노드가 없으므로
   스택에서 6번 노드를 꺼낸다.

6) 다시 스택의 최상단 노드가 된 7에는 방문하지 않은 인접 노드인 8이 있으므로
   8번 노드를 스택에 넣고 방문 처리한다.

7) 스택의 최상단 노드인 8에는 방문하지 않은 인접 노드가 없으므로 스택에서 8을 꺼내고,
   다음 최상단 노드가 된 7에도 없으므로 꺼내고,
   마찬가지로 2도 스택에서 꺼내면 남은 1이 최상단 노드가 되므로
   1의 인접하지 않은 노드인 3을 스택에 넣고 방문 처리한다.

8) 스택의 최상단 노드인 3의 방문하지 않은 인접 노드인 4, 5 중에
   번호가 낮은 노드인 4를 스택에 넣고 방문 처리한다.

9) 스택의 최상단 노드인 4의 방문하지않은 노드인 5를 스택에 넣고 방문 처리한다.

10) 남아 있는 노드에 방문하지 않은 노드가 모두 사라졌다.
    스택에 남아 있는 모든 노드를 차례대로 꺼낸다. (5 - 4 - 3 - 1 의 순서대로)
    
이 과정을 정리해보면 전체 노드의 탐색 순서(스택에 들어간 순서는)
 1 - 2 - 7 - 6 - 8 - 3 - 4 - 5 가 된다.


"""



# DFS를 파이썬 코드로 구현해보자.
def dfs(graph, v, visited) :
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v] :
        if not visited[i] :
            # 재귀적으로 방문하지 않은 노드들을 탐색한다.
            dfs(graph, i, visited)

# 각 노드가 연결된 정보를 표현 (2차원 리스트)
# 보통 시작 노드가 1이기때문에 맨 처음은 빈 리스트로 설정
# 1, 2, 3, ... 8까지 각각 연결된 노드들을 리스트에 저장
graph = [
    [], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5],
    [3, 4], [7], [2, 6, 8], [1, 7]
]

# 각 노드가 방문된 정보를 표현 (1차원 리스트), 처음은 false로 초기화
# 단, 노드가 1번부터 8번까지 있으므로 맨 처음 0번 인덱스는 사용하지 않기 위해서
# 노드의 개수 + 1개의 리스트를 만들어준다.
visited = [False] * 9

# 정의된 DFS 함수 호출
dfs(graph, 1, visited)





"""
4. BFS (Breadth - First Search)
BFS는 너비 우선 탐색이라고도 부르며, 
그래프에서 가까운 노드부터 우선적으로 탐색하는 알고리즘이다.

BFS는 큐 자료구조를 이용한다.
 1) 탐색 시작 노드를 큐에 삽입하고 방문 처리한다.
 2) 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를
    모두 큐에 삽입하고 방문 처리한다.
 3) 더 이상 2번 과정을 수행할 수 없을 때까지 반복한다.



- BFS 동작 예시 (번호가 낮은 인접노트부터 방문한다.)
시작 노드 : 1

1) 시작 노드인 1을 큐에 삽입하고 방문 처리한다.

2) 큐에서 노드 1을 꺼내 1번과 연결되어 있는
   방문하지 않은 인접노드 2, 3, 8을 큐에 삽입하고 방문 처리한다.

3) 최하단, 즉 출구에 가장 가까운 노드인 2번 노드를 꺼내고
   2번 노드와 연결되어 있는 방문하지 않은 인접 노드 7을 큐에 삽입하고 방문 처리한다.
   
4) 다음 최하단 노드인 3번 노드를 꺼내 방문하지 않은 인접노드 4, 5를
   큐에 삽입하고 방문 처리한다.
   
5) 다음 최하단 노드인 8번 노드를 큐에서 꺼내고 방문하지 않은 인접노드가 없으므로 넘어간다.

6) 다음 최하단 노드인 7번 노드를 큐에서 꺼내고 방문하지 않은 인접노드 6을
   큐에 삽입하고 방문 처리한다.

7) 남아 있는 노드에 방문하지 않은 노드가 없으므로
   큐에 남아있는 노드 6 - 5 - 4를 차례대로(4 - 5 - 6) 꺼낸다.
   
이 과정을 정리해보면 전체 노드의 탐색 순서(큐에 들어간 순서)는
1 - 2 - 3 - 8 - 7 - 4 - 5 - 6 가 된다.


** BFS 는 시작 노드에서 가까운 노드들을 우선적으로 탐색한다.
   거리가 1인 노드, 2인 노드, 3인 노드 ... 순으로 탐색하게 되므로
   각 간선의 비용이 모두 동일한 상태에서 최단거리 문제를 해결할 때 유용하게 사용된다.
   
   
"""



# BFS를 파이썬으로 구현해보자.
from collections import deque

# BFS 메소드 정의
def bfs(graph, start, visited) :
    # 큐 구현을 위해 deque 라이브러리 사용
    queue = deque([start])
    # 현재 노드를 방문 처리
    visited[start] = True
    # 큐가 빌 때까지 반복
    while queue :
        # 큐에서 하나의 원소를 뽑아 출력하기
        v = queue.popleft()
        print(v, end=' ')
        # 아직 방문하지 않은 인접한 원소들을 큐에 삽입
        for i in graph[v] :
            if not visited[i] :
                queue.append(i)
                visited[i] = True

# 각 노드가 연결된 정보를 표현 (2차원 리스트)
graph = [
    [], [2, 3, 8], [1, 7], [1, 4, 5],
    [3, 5], [3, 4], [7], [2, 6, 8], [1, 7]
]

# 각 노드가 방문된 정보를 표현 (1차원 리스트)
visited = [False] * 9

# 정의된 BFS 함수 호출
bfs(graph, 1, visited)




